{
  "_args": [
    [
      {
        "raw": "named-js-regexp@^1.3.1",
        "scope": null,
        "escapedName": "named-js-regexp",
        "name": "named-js-regexp",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "/tmp/apm-install-dir-11765-15437-f3qa3r.n8xre/node_modules/linter-eslint/node_modules/atom-linter"
    ]
  ],
  "_from": "named-js-regexp@>=1.3.1 <2.0.0",
  "_id": "named-js-regexp@1.3.2",
  "_inCache": true,
  "_location": "/linter-eslint/named-js-regexp",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/named-js-regexp-1.3.2.tgz_1479472386319_0.8439773763529956"
  },
  "_npmUser": {
    "name": "edvinv",
    "email": "edvinv@outlook.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "named-js-regexp@^1.3.1",
    "scope": null,
    "escapedName": "named-js-regexp",
    "name": "named-js-regexp",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/linter-eslint/atom-linter"
  ],
  "_resolved": "https://registry.npmjs.org/named-js-regexp/-/named-js-regexp-1.3.2.tgz",
  "_shasum": "967779b923c2381e243a97cb8a39413141def241",
  "_shrinkwrap": null,
  "_spec": "named-js-regexp@^1.3.1",
  "_where": "/tmp/apm-install-dir-11765-15437-f3qa3r.n8xre/node_modules/linter-eslint/node_modules/atom-linter",
  "author": {
    "name": "edvinv"
  },
  "bugs": {
    "url": "https://github.com/edvinv/named-js-regexp/issues"
  },
  "dependencies": {},
  "description": "Extends JavaScript RegExp with named groups, backreferences and replacement.",
  "devDependencies": {
    "chai": "^3.4.0",
    "mocha": "^2.3.3"
  },
  "directories": {},
  "dist": {
    "shasum": "967779b923c2381e243a97cb8a39413141def241",
    "tarball": "https://registry.npmjs.org/named-js-regexp/-/named-js-regexp-1.3.2.tgz"
  },
  "gitHead": "28ac136f3d23f75a5280361870306846aecbed73",
  "homepage": "https://github.com/edvinv/named-js-regexp#readme",
  "keywords": [
    "named",
    "regexp",
    "regex",
    "capture",
    "group",
    "regular",
    "expression"
  ],
  "license": "MIT",
  "main": "lib/named-js-regexp.js",
  "maintainers": [
    {
      "name": "edvinv",
      "email": "edvinv@outlook.com"
    }
  ],
  "name": "named-js-regexp",
  "optionalDependencies": {},
  "readme": "## named-js-regexp  \r\nExtends JavaScript RegExp with named groups, backreferences and replacement. \r\nAll are converted to normal JavaScript RegExp so you will get the same speed \r\nexcept for initial parsing, which can also be eliminated with cache enabled. \r\n\r\n### Syntax\r\nNamed group: `(?<name>expression)` or `(:<name>expression)`  \r\nNamed backreference: `\\k<name>`  \r\nNamed group in replacement text:  `${name}`\r\n  \r\n  \r\n### Install\r\n```sh\r\nnpm install named-js-regexp --save\r\n```\r\n\r\n### Using with regexp.execGroups\r\n```javascript\r\nvar namedRegexp = require(\"named-js-regexp\");\r\n\r\nvar re=namedRegexp(\"(?<hours>\\\\d\\\\d?):(?<minutes>\\\\d\\\\d?)(:(?<seconds>\\\\d\\\\d?))?\"); \r\n// or with regexp literal... NOTE: you must use (:<name>) \r\nvar re=namedRegexp(/(:<hours>\\d\\d?):(:<minutes>\\d\\d?)(:(:<seconds>\\d\\d?))?/);\r\n\r\nre.execGroups(\"1:2:33\");    // => { hours:\"1\", minutes:\"2\", seconds:\"33\" }\r\nre.execGroups(\"1\");         // => null\r\n```\r\n\r\n### Using with regexp.exec\r\n```javascript\r\nvar re=namedRegexp(\"(?<hours>\\\\d\\\\d?):(?<minutes>\\\\d\\\\d?)(:(?<seconds>\\\\d\\\\d?))?\");\r\nvar result=re.exec(\"1:2\");\r\nresult.groups();            // => { hours:\"1\", minutes:\"2\", seconds:undefined }\r\nresult.group(\"minutes\");    // => \"2\"\r\nresult.group(\"seconds\");    // => undefined\r\n```\r\n\r\n### Using named backreferences\r\n```javascript\r\nvar re=namedRegexp(\"(<(?<elem>\\\\w+)>).*<\\/\\\\k<elem>>\");\r\nvar result=re.exec(\"<div>hi</div>\");\r\nresult.groups();            // => { elem: \"div\" }\r\n```\r\n\r\n### Using named replacement\r\n```javascript\r\nvar re = namedRegexp(\"(?<h>\\\\d+):(?<m>\\\\d+):(?<s>\\\\d+)\");\r\nre.replace('1:23:44', '${h}hour(s) ${m}minute(s) ${s}second(s)');\r\n// => 1hour(s) 23minute(s) 44second(s)\r\nre.replace('1:23:44', function () {\r\n\tvar g = this.groups();\r\n\treturn g.h + 'hour' + (g.h > 1 ? 's ' : ' ')+ g.m + 'minute' + (g.m > 1 ? 's ' : ' ')+ g.s + 'second' + (g.s > 1 ? 's' : '');\r\n});\r\n// => 1hour 23minutes 44seconds\r\n```\r\n\r\n### Using with regexp.groupsIndices\r\n```javascript\r\nvar re = namedRegexp(\"(?<hours>\\\\d\\\\d?):(?<minutes>\\\\d\\\\d?)(:(?<seconds>\\\\d\\\\d?))?\");\r\nvar matches = \"1:2\".match(re);\r\nmatches[re.groupsIndices[\"hours\"]];     // => \"1\"\r\nmatches[re.groupsIndices[\"seconds\"]];   // => undefined\r\n```\r\n\r\n### Handling group name duplication\r\n```javascript\r\nvar re = namedRegexp(\"(?<digit>((?<a>\\\\d):(?<b>\\\\d)))|(?<char>((?<a>\\\\w):(?<b>\\\\w)))\");\r\nre.groupsIndices;    // => { digit: 1, a: [ 3, 7 ], b: [ 4, 8 ], char: 5 }\r\n\r\nvar r = re.exec(\"a:b\");\r\nr.groups();          // => { a: \"a\", b: \"b\", digit: undefined, char: \"a:b\" }\r\nr.groups(true);      // => { a: [undefined, \"a\"], b: [undefined, \"b\"], digit: undefined, char: \"a:b\" }\r\nr = re.exec(\"1:2\");\r\nr.groups();          // => { a: \"1\", b: \"2\", digit: \"1:2\", char: undefined }\r\nr.groups(true);      // => { a: [\"1\", undefined], b: [\"2\", undefined], digit: \"1:2\", char: undefined }\r\n```\r\n\r\n### Using with successive matches\r\n```javascript\r\nvar re = namedRegexp(\"(?<x>\\\\d)(?<y>\\\\w)\", \"g\");\r\nvar r = re.exec(\"1a2b\");\r\nr.groups();              // => { x: '1', y: 'a' }\r\nr = re.exec(\"1a2b\");\r\nr.groups();              // => { x: '2', y: 'b' }\r\nr = re.exec(\"1a2b\");     // => null\r\n```\r\n\r\n### API\r\n`var namedRegexp = require(\"named-js-regexp\");`  \r\n`regexp=namedRegexp(value:string|RegExp|boolean, flags?:string)`  \r\nReturns normal JavaScript RegExp object with some additional properties. Parameter value can be string expression or RegExp object. For\r\nlatest you must use `(:<name>expression)` syntax and flags parameter is ignored.  \r\nSet value parameter to true to enable caching or set to false to clear and disable cache.  \r\n\r\n##### regexp\r\n`regexp.exec(expression:string)`  \r\nPerforms search for the matches and returns null if no match was found or matched (Array) result.\r\n\r\n`regexp.execGroups(expression:string, all?:boolean)`  \r\nPerforms search for the matches and returns null if no match was found or name/value dictionary, \r\nwhere name is group name and value is matched value. If same group name was defined multiple times and \r\nparameter all is false (default) then first (from left to right) not undefined value is returned. \r\nIf parameter all is true then returned value is array of all matched values.     \r\n\r\n`regexp.replace(text:string, replacement:string|function)`  \r\nWorks as String.prototype.replace. If parameter replacement is string you can also use named replace like `${name}` instead of `$1`.\r\nIf replacement is function it receives same parameters as String.prototype.replace callback, but `this` is set to matched \r\nobject, similar to one returned by exec.  \r\n\r\n`regexp.groupsIndices`  \r\nReturns name/value mapper where name is group name and value is index that can be used to access matched value by index. \r\nIf same group name was defined multiple times then value is array of all matched indices ordered from left to right as defined in\r\nregular expression. \r\n\r\n##### matched (returned by regexp.exec)\r\n`matched.groups(all?:boolean)`  \r\nReturns name/value dictionary, where name is group name and value is matched value. Check regexp.execGroups \r\nfor info about parameter all.    \r\n\r\n`matched.group(name:string, all?:boolean)`  \r\nReturns named group value or undefined if named group was not found. Check regexp.execGroups \r\nfor info about parameter all.  \r\n\r\n### NOTES\r\n- Group name should start with '\\_$a-zA-Z' and can contain only '\\_$a-zA-Z0-9'.\r\n- Named backreference should refer to already defined named group, otherwise error is thrown.\r\n- Named backreference and named replacement should not refer to duplicated named group, otherwise error is thrown.  \r\n\r\n### LICENCE\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/edvinv/named-js-regexp.git"
  },
  "scripts": {
    "test": "mocha ./test"
  },
  "version": "1.3.2"
}

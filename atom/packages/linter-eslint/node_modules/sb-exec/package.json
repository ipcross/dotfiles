{
  "_args": [
    [
      {
        "raw": "sb-exec@^4.0.0",
        "scope": null,
        "escapedName": "sb-exec",
        "name": "sb-exec",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/tmp/apm-install-dir-11765-15437-f3qa3r.n8xre/node_modules/linter-eslint/node_modules/atom-linter"
    ]
  ],
  "_from": "sb-exec@>=4.0.0 <5.0.0",
  "_id": "sb-exec@4.0.0",
  "_inCache": true,
  "_location": "/linter-eslint/sb-exec",
  "_nodeVersion": "7.7.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sb-exec-4.0.0.tgz_1492181912119_0.6211084274109453"
  },
  "_npmUser": {
    "name": "steelbrain",
    "email": "i@steelbrain.me"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sb-exec@^4.0.0",
    "scope": null,
    "escapedName": "sb-exec",
    "name": "sb-exec",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/linter-eslint/atom-linter"
  ],
  "_resolved": "https://registry.npmjs.org/sb-exec/-/sb-exec-4.0.0.tgz",
  "_shasum": "46747f0df162626c16ebf0fea42245ad1aa859ca",
  "_shrinkwrap": null,
  "_spec": "sb-exec@^4.0.0",
  "_where": "/tmp/apm-install-dir-11765-15437-f3qa3r.n8xre/node_modules/linter-eslint/node_modules/atom-linter",
  "author": {
    "name": "steelbrain"
  },
  "bugs": {
    "url": "https://github.com/steelbrain/exec/issues"
  },
  "dependencies": {
    "consistent-env": "^1.2.0",
    "lodash.uniq": "^4.5.0",
    "sb-npm-path": "^2.0.0"
  },
  "description": "Process spawning APIs beautified",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-preset-steelbrain": "^5.0.0",
    "eslint-config-steelbrain": "^3.0.0",
    "flow-bin": "^0.43.0",
    "jasmine-fix": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "46747f0df162626c16ebf0fea42245ad1aa859ca",
    "tarball": "https://registry.npmjs.org/sb-exec/-/sb-exec-4.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "6a1332b099899e5a91dcfa9529c11fc1822364a3",
  "homepage": "https://github.com/steelbrain/exec#readme",
  "keywords": [
    "child_process",
    "process",
    "exec"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "arcanemagus",
      "email": "landonabney@gmail.com"
    },
    {
      "name": "steelbrain",
      "email": "de.steelbrain@gmail.com"
    }
  ],
  "name": "sb-exec",
  "optionalDependencies": {},
  "readme": "# Exec\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/steelbrain/exec.svg)](https://greenkeeper.io/)\n\nNode's Process spawning APIs beautified\n\n## Installation\n\n```sh\nnpm install --save sb-exec\n```\n\n## API\n\n```js\ntype $OptionsAccepted = {\n  timeout?: number | Infinity, // In milliseconds\n  stream?: 'stdout' | 'stderr'  | 'both',\n  env: Object,\n  stdin?: string | Buffer,\n  local?: {\n    directory: string,\n    prepend?: boolean\n  },\n  throwOnStderr?: boolean = true,\n  allowEmptyStderr?: boolean = false,\n  ignoreExitCode?: boolean\n} // Also supports all options of child_process::spawn\n\ntype PromisedProcess = {\n  then(callback: Function): Promise\n  catch(callback: Function): Promise\n  kill(signal: number)\n}\n\nexport function exec(filePath: string, parameters: array, options: $OptionsAccepted): PromisedProcess\nexport function execNode(filePath: string, parameters: array, options: $OptionsAccepted): PromisedProcess\n```\n\n## Explanation\n\n### Promise callbacks\n\n* `then` callback is supposed to accept one of these results, depending on `options.stream`:\n  * `stdout` and `stderr` will result in a string, representing an stdout or stderr stream, respectively.\n  * `both` will result in an object of `{stdout, stderr, exitCode}` representing their respective streams and an exit code of a process.\n  * If `options.stream` is not provided it is assumed to be `stdout`, so a promise will result in a string representing an stdout stream.\n\n### `options.local`\n\n`options.local` adds node executables in `node_modules` relative to\n`options.local.directory` to `PATH` like in npm scripts.\n\n`options.local.prepend` prioritizes local executables over ones already in `PATH`.\n\n## License\n\nThis project is licensed under the terms of MIT License, see the LICENSE file\nfor more info\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/steelbrain/exec.git"
  },
  "scripts": {
    "clean": "rm -rf lib",
    "compile": "npm run clean && babel src --out-dir lib",
    "lint": "(flow check) && (eslint .)",
    "test": "apm test",
    "watch": "npm run clean && babel src --out-dir lib --watch"
  },
  "version": "4.0.0"
}

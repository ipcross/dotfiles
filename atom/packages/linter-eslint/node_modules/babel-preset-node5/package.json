{
  "_args": [
    [
      {
        "raw": "babel-preset-node5@^12.0.0",
        "scope": null,
        "escapedName": "babel-preset-node5",
        "name": "babel-preset-node5",
        "rawSpec": "^12.0.0",
        "spec": ">=12.0.0 <13.0.0",
        "type": "range"
      },
      "/tmp/d-11765-15437-gijc49.mqqo/package.tgz"
    ]
  ],
  "_from": "babel-preset-node5@>=12.0.0 <13.0.0",
  "_id": "babel-preset-node5@12.0.1",
  "_inCache": true,
  "_location": "/linter-eslint/babel-preset-node5",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/babel-preset-node5-12.0.1.tgz_1486065626052_0.7917725672014058"
  },
  "_npmUser": {
    "name": "leebenson",
    "email": "lee@leebenson.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-preset-node5@^12.0.0",
    "scope": null,
    "escapedName": "babel-preset-node5",
    "name": "babel-preset-node5",
    "rawSpec": "^12.0.0",
    "spec": ">=12.0.0 <13.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/linter-eslint"
  ],
  "_resolved": "https://registry.npmjs.org/babel-preset-node5/-/babel-preset-node5-12.0.1.tgz",
  "_shasum": "cff0d80a26d92cb284658b6d026fc47e4fd6af91",
  "_shrinkwrap": null,
  "_spec": "babel-preset-node5@^12.0.0",
  "_where": "/tmp/d-11765-15437-gijc49.mqqo/package.tgz",
  "author": {
    "name": "Lee Benson",
    "email": "lee@leebenson.com"
  },
  "bugs": {
    "url": "https://github.com/leebenson/babel-preset-node5/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-async-functions": "^6.13.0",
    "babel-plugin-syntax-object-rest-spread": "^6.13.0",
    "babel-plugin-syntax-trailing-function-commas": "^6.13.0",
    "babel-plugin-transform-async-to-generator": "^6.16.0",
    "babel-plugin-transform-es2015-destructuring": "^6.19.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.18.0",
    "babel-plugin-transform-es2015-parameters": "^6.18.0",
    "babel-plugin-transform-es2015-sticky-regex": "^6.8.0",
    "babel-plugin-transform-es2015-unicode-regex": "^6.11.0",
    "babel-plugin-transform-object-rest-spread": "^6.19.0",
    "babel-plugin-transform-strict-mode": "^6.18.0",
    "babel-polyfill": "^6.16.0"
  },
  "deprecated": "Use https://github.com/babel/babel-preset-env instead.",
  "description": "Babel preset for Node 5.x (ECMAScript stage 0 and up)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "cff0d80a26d92cb284658b6d026fc47e4fd6af91",
    "tarball": "https://registry.npmjs.org/babel-preset-node5/-/babel-preset-node5-12.0.1.tgz"
  },
  "gitHead": "f0fcca2dbec88e921d0a43e206adfd35850c0f75",
  "homepage": "https://github.com/leebenson/babel-preset-node5#readme",
  "keywords": [
    "babel-preset-node5",
    "babel-preset",
    "babel",
    "node5",
    "es2015",
    "es6"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "leebenson",
      "email": "lee@leebenson.com"
    }
  ],
  "name": "babel-preset-node5",
  "optionalDependencies": {},
  "readme": "# Note: DEPRECATED.  Please use [babel-preset-env](https://github.com/babel/babel-preset-env) instead.\n\nThis package is no longer the recommended way to polyfill with Babel. The new best practice is to use [babel-preset-env](https://github.com/babel/babel-preset-env).\n\n----------\n\n## Babel 6.x presets for Node 5.x (updated regularly!)\n\nNode 5.x brings ~59% [native ES6/ES2015 coverage](https://nodejs.org/en/docs/es6/).\n\nThis preset for Babel 6 attempts to bridge the gap for the much of the remaining 41% of the evolving ECMAScript spec using [Babel plug-ins](https://github.com/babel/babel/tree/master/packages), from stage 0 and up.\n\n## Motivation\n\nBabel 6.x is awesome, but simply including the [ES2015 preset](https://www.npmjs.com/package/babel-preset-es2015) means you're transpiling features\nthat your Node 5.x installation can already do faster and natively, replacing them with inferior / old code.\n\nThis preset complements existing V8-native functionality - it doesn't work _around_ it.\n\nThe end result is nearly always a faster build and script execution time.\n\n## Key features:\n\n* Strict mode, to enable Classes and `let` (via [babel-plugin-transform-strict-mode](https://www.npmjs.com/package/babel-plugin-transform-strict-mode))\n* Removes trailing commas from function calls (via [babel-plugin-syntax-trailing-function-commas](https://www.npmjs.com/package/babel-plugin-syntax-trailing-function-commas))\n* CommonJS import/export module syntax ([babel-plugin-transform-es2015-modules-commonjs](https://www.npmjs.com/package/babel-plugin-transform-es2015-modules-commonjs))\n* [Destructuring](http://www.2ality.com/2015/01/es6-destructuring.html) (via [babel-plugin-transform-es2015-destructuring](https://www.npmjs.com/package/babel-plugin-transform-es2015-destructuring))\n* Default and rest parameters (via [babel-plugin-transform-es2015-parameters](https://www.npmjs.com/package/babel-plugin-transform-es2015-parameters))\n* Sticky RegEx (via [babel-plugin-transform-es2015-sticky-regex](https://www.npmjs.com/package/babel-plugin-transform-es2015-sticky-regex))\n* Unicode RegEx (via [babel-plugin-transform-es2015-unicode-regex](https://www.npmjs.com/package/babel-plugin-transform-es2015-unicode-regex))\n* Async/await (via [babel-plugin-transform-async-to-generator](https://www.npmjs.com/package/babel-plugin-transform-async-to-generator) and [babel-plugin-syntax-async-functions](https://www.npmjs.com/package/babel-plugin-syntax-async-functions))\n\n**Note: This package originally shipped with the React preset, but to avoid bloat, doesn't any longer. If you want to add that, please install [babel-preset-react](https://www.npmjs.com/package/babel-preset-react) too**\n\n## Usage instructions\n\n## Installation\n\nInstall via NPM the usual way:\n\n`npm i babel-preset-node5`\n\n## Usage\n\n### Via `.babelrc` (recommended)\n\nCreate a `.babelrc` file in your project root, and include 'node5' in your preset path:\n\n```js\n{\n  \"presets\": [\n    \"node5\"\n  ]\n}\n```\n\nNow whenever you run `babel-node`, it will polyfill your app with the ES2015 features that Node 5 is missing.\n\n### Via CLI\n`$ babel script.js --presets node5`\n\n### Via Node API\n\nIf you don't want to use a project-wide `.babelrc` file (as above):\n\n```js\nrequire(\"babel-core\").transform(\"code\", {\n  presets: [\"node5\"]\n});\n```\n\nAnd if you _do_, and you want to use vanilla `node` instead of `babel-node` as your CLI, you can create an entry script that references your pre-transpiled code like so:\n\n```js\nrequire('babel-register');\nrequire('path/to/es6/script');\n```\n\n... which will then run everywhere Node can.\n\nOf course, make sure to `npm i -S babel-core` or `npm i -S babel-register` respectively, to grab the NPM packages you'll need to transpile on-the-fly.\n\n### Webpack, Gulp, Browserify, etc\n\nFollow vendor instructions and include `node5` in your babel \"preset\" list.\n\n## How to add React support\n\nBabel has a ready-made preset for React, and you now need to install it separately.\n\nJust grab it via NPM:\n\n`npm i babel-preset-react`\n\nAnd then add it to your \"presets\" list in `.babelrc`:\n\n```js\n{\n  \"presets\": [\n    \"node5\",\n    \"react\"\n  ]\n}\n```\n\n## How to use async/await\n\nThe async/await proposal allows you to wait on a Promise, and write asynchronous code that looks synchronous.\n\nHere's an example:\n\n```js\nasync function getUsers(howMany) {\n  try {\n    const response = await fetch(`http://jsonplaceholder.typicode.com/users/${howMany}`); // <-- a Promise\n    return response.json(); // <-- Another promise.\n  } catch(e) {\n    console.log('some kind of error occurred: ', e)\n  }\n}\n\ngetUsers(10).then(users => {\n  // \"users\" contains the result of `response.json()`. Async functions *always*\n  // return a promise, even if that means wrapping a non-Promise in Promise.resolve\n})\n```\n\nIn the above example, `fetch` returns a promise. By prefixing the function with `async` and prefixing every Promise with `await`, we avoid the typical `.then()` chain inside of the function block and can reason about the flow of the application a little more clearly.\n\nWe can also wrap promises in `try/catch` blocks, instead of bolting on `.catch()` chains.\n\nThe necessary babel plug-ins to use async/await are included in this package, so you can use this syntax right away.\n\n## Using with Webpack 2 or Rollup?\n\nIf you want to enable 'tree shaking' in Webpack 2 or Rollup, you can optionally remove transpiling down to CommonJS by passing `{ \"modules\": false }` as an option when including this module in your `.babelrc` file, like so:\n\n```js\n{\n  \"presets\": [\n    [\"node5\", {\n      \"modules\": false\n    }]\n  ]\n}\n```\n\n## Using Node 7.x?\n\nCheck out [babel-preset-node7](https://www.npmjs.com/package/babel-preset-node7)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/leebenson/babel-preset-node5.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "12.0.1"
}

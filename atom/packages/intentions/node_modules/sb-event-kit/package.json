{
  "_args": [
    [
      {
        "raw": "sb-event-kit@^2.0.0",
        "scope": null,
        "escapedName": "sb-event-kit",
        "name": "sb-event-kit",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/tmp/d-11765-16291-1m7p6ge.09ngi/package.tgz"
    ]
  ],
  "_from": "sb-event-kit@>=2.0.0 <3.0.0",
  "_id": "sb-event-kit@2.0.0",
  "_inCache": true,
  "_location": "/intentions/sb-event-kit",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/sb-event-kit-2.0.0.tgz_1466783669533_0.9558979070279747"
  },
  "_npmUser": {
    "name": "steelbrain",
    "email": "de.steelbrain@gmail.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sb-event-kit@^2.0.0",
    "scope": null,
    "escapedName": "sb-event-kit",
    "name": "sb-event-kit",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/intentions",
    "/intentions/disposable-event"
  ],
  "_resolved": "https://registry.npmjs.org/sb-event-kit/-/sb-event-kit-2.0.0.tgz",
  "_shasum": "10b736812f13a37a473aa6eaa3089b66ab725a7f",
  "_shrinkwrap": null,
  "_spec": "sb-event-kit@^2.0.0",
  "_where": "/tmp/d-11765-16291-1m7p6ge.09ngi/package.tgz",
  "author": {
    "name": "steelbrain"
  },
  "bugs": {
    "url": "https://github.com/steelbrain/event-kit/issues"
  },
  "dependencies": {},
  "description": "A library for creating disposable components",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "10b736812f13a37a473aa6eaa3089b66ab725a7f",
    "tarball": "https://registry.npmjs.org/sb-event-kit/-/sb-event-kit-2.0.0.tgz"
  },
  "gitHead": "cb72f2bf84458ba1d6a9e52ebe025fa7facbb10f",
  "homepage": "https://github.com/steelbrain/event-kit#readme",
  "license": "MIT",
  "main": "lib/main.js",
  "maintainers": [
    {
      "name": "steelbrain",
      "email": "fakedemail@email.com"
    }
  ],
  "name": "sb-event-kit",
  "optionalDependencies": {},
  "readme": "Event-Kit\n===========\n\nEvent-Kit is an Application architecture inspired from [Atom's EventKit][1]\n\n#### API\n\n```js\nexport class CompositeDisposable {\n  constructor()\n  add(...disposables)\n  remove(...disposables)\n  clear()\n  isDisposed(): boolean\n  dispose()\n}\nexport class Disposable {\n  constructor(callback)\n  isDisposed(): boolean\n  dispose()\n}\nexport class Emitter {\n  constructor()\n  on(eventName, handler): Disposable\n  off(eventName, handler)\n  clear()\n  emit(eventName, ...params): Promise\n  isDisposed(): boolean\n  dispose()\n}\n```\n\n#### Introduction\n\nDisposable architecture has several benefits, the most important one being simplicity and increase in developer productivity.\nThis architecture is something that works everywhereâ„¢, you can hot-reload themes, plugins or even the entire app if you follow it.\n\n##### Disposable\n\nDisposables are the base of this architecture, they are objects that have a `dispose` function on them. It is called whenever a\nparent object is being disposed, all of the cleanup code should go there.\n\n##### Emitter\n\nEmitters of this architecture are just like every other emitter but the one thing they have different is that they return\ndisposables when you bind an event, you won't have to call `.removeListener` or `.off` anymore, just dispose the disposable you get\nfrom `.on`.\n\n##### ComositeDisposable\n\nCompositeDisposables are containers of disposables. They implement the disposable interface themselves, so when we do\n`compositedisposable.dispose()` they iterate over all of their disposables and dispose them as well.\n\n##### Named Events\n\nThis is more of a method naming convention than an interface but it's still important. Traditional event emitters have APIs\nlike this\n\n```js\nclass SomeEmitter {\n  on(eventName, callback)\n}\n```\n\nthat `eventName` can be any string, therefore it breeds confusion, developers sometimes make a typo somewhere and spend hours\nfinding it, they also \"accidently\" type one letter uppercase or all letters uppercase and it doesn't work.\n\nIt also makes it difficult to find all available event names and we end up digging the docs.\n\nDisposable architecture solves this with functions that act as event handlers, like\n\n```js\nclass App {\n  onDidLoad(callback): Disposable\n  onDidReload(callback): Disposable\n  OnWillBlowUp(callback): Disposable\n}\n```\n\n\n#### Example\n\nHere's an example app using the Disposable Architecture\n\n```js\n// app.js\nimport {App} from './lib/app'\n\nconst app = App.create()\n\nApp.activate().catch(function(e) {\n  console.log(e.stack)\n  app.dispose()\n})\n```\n\n```js\n// lib/app.js\nimport {Disposable, CompositeDisposable} from 'sb-event-kit'\nimport {Database} from './db'\nimport {Server} from './server'\n\nconst debug = require('debug')('APP:MAIN')\n\nexport class App {\n  constructor() {\n    this.subscriptions = new CompositeDisposable()\n    this.db = new Database()\n    this.server = new Server()\n\n    this.subscriptions.add(this.db)\n    this.subscriptions.add(this.server)\n\n    this.server.onDidClientConnect(function() {\n      debug('Client :: Connected')\n    })\n  }\n  activate() {\n    return Promise.all([\n      this.db.activate(),\n      this.server.activate()\n    ])\n  }\n  dispose() {\n    this.subscriptions.dispose()\n  }\n}\n```\n```js\n// lib/db.js\nimport {MongoDB} from 'some-mongo-library'\nimport {Database as DatabaseConfig} from '../config'\n\nexport class Database {\n  constructor() {\n    this.connection = new MongoDB()\n  }\n  activate() {\n    return this.connection.connect(DatabaseConfig)\n  }\n  query(query) {\n    return this.connection.query(query)\n  }\n  dispose() {\n    this.connection.unref()\n  }\n}\n```\n```js\n// lib/server.js\nimport {Emitter, Disposable, CompositeDisposable} from 'sb-event-kit'\nimport HTTPServer from 'some-server-library'\nimport {Server as ServerConfig} from '../config'\n\nexport class Server {\n  constructor() {\n    this.subscriptions = new CompositeDisposable()\n    this.emitter = new Emitter()\n    this.connection = new HTTPServer()\n\n    this.subscriptions.add(this.emitter)\n\n    this.connection.on('client', connection => {\n      this.emitter.emit('did-client-connect', connection)\n    })\n  }\n  activate() {\n    return this.connection.listen(ServerConfig)\n  }\n  onDidClientConnect(callback) {\n    return this.emitter.on('did-client-connect', callback)\n  }\n  dispose() {\n    this.subscriptions.dispose()\n    this.connection.unref()\n  }\n}\n```\n\n#### License\nThis project is licensed under the terms of MIT License. See the License file for more info.\n\n[1]:https://github.com/atom/event-kit\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/steelbrain/event-kit.git"
  },
  "scripts": {
    "compile": "ucompiler go",
    "test": "apm test"
  },
  "version": "2.0.0"
}
